install turbo

try to deploy on azure

when cacheManager is integrated:
	- refactor its usage wherever it appears in respect to accessing nested objects; tags etc
	- is the override pattern we're using good or can it be updated while in the cache?

Work needed on updateReactor

We need CLI commands for:
	- copying laravel config/migrations files from the library locations to dev land i.e. so config can lift the files (from the hard-coded "config" folder)
	- starting app in long running process
		- index.php is a cli-invoked script takes the name of the main class, runs static checks, starts queue worker, calls [orchestrate on that main class] inside our event loop

Named renderers for the purpose of portable links that don't break in transit
	- instead of checking for url combinations matching requestDetails, we check for name but while building the combination so that on hit, we simply extract the name
Url map generation
	- for each pattern, we treat it as if it's requestDetails (by setting it as requestDetails)
	- if it's not the end of the thread (contains a _prefixFor), we create a sub to contain the patterns below it
Alternate route finder implementation
	- we loop over the incoming path instead of the collection. progress is determined by the path matching
	- matching will have to take into account that segment could be placeholder
		- we send user/5 and user/settings
		- patterns settings and id exist
		- matcher looks for 5 (literal) OR lower-case character/placeholder
		- remember several path segments can be represented under one pattern. which means the above would have to be pushed into an array
			- USE__METHODh_id, after the breakup, map into normalised segments
			- route Segment incrementally in_array
	- matcher uses in_array instead of comparing with each collection entry. No more need for prefixCurrent and co
Container
	- should be divided into a write only version, and a full version extending that


Ensure the given type is an instance of current/active whenType. Check if any [getClass] caller uses the second argument

C:\wamp64\www\tilwa\nmeri\tilwa\vendor\bin>phpunit ../../tests/

**
sqlite
<server name="DB_CONNECTION" value="sqlite"/>
<server name="DB_DATABASE" value=":memory:"/>


\PHPUnit\Framework\AssertionFailedError, Concerns\InteractsWithDatabase, Testing\Constraints
	- extend and override getConnection (see portion of this doc on how to boot models)

	- Illuminate\Testing\TestResponse: overwrite these, then use the new trait/class in place of the above
		- assertSee[x] (they need the `e` method)
		- assertView[x] (needs to work with our view)
		- assertSession[x]

Wrap:
	- debug_backtrace
	- Session so we can configure its duration (an adapter)
		- different user roles can have different durations
		- config->ttl method receives user (given a fixed duration). this guy is expected to return a custom one for us to modify the current user with
		- framework calls this after resuming session

on the tearDown methods, you wanna:
	- empty container
	- $model->truncate()
	- reset session

==when doesn't work==
	- routing:
		- check routeManager line 166
			var_dump($pattern, $parsed, $renderer->getRouteMethod(), $this->routeCompare($parsed, $renderer->getRouteMethod()));

			/*
			string(10) "SEGMENT_id"
			string(12) "/SEGMENT/id/"
			string(3) "get"
			bool(true)*/
	- crud:
		- index: use "_index" instead of leaving it blank
		- line 102
			- doesn't this return a regex that should be escaped/normalized? if that be the case, match incoming path against that pattern and return the result to this guy

	- models:
		- are they setting each model's connection at some point? if yes, we'd have to do this for all the models of this particular orm
		- Think there's a static setConnection method

		- DB facade: class DB extends Illuminate\Database\Capsule\Manager {} in the global namespace fixed the problem

	- flows:
		- finding in cache after job runs, consider delegating path fetching to outerFlowWrapper->dataPath (although there's a chance that prefix wasn't even added in the hydrator, see line 84)
		- [OuterFlowWrapperTest->test_empties_cache_entry_after_returning], write a sub test that checks the cache directly to confirm it was removed

	- tests:
		- mocks injected into modules => relevant test should create mock and manually trigger module booting before it runs. But first, check whether prophecy will work


test only and except from routeCollection

rework/dismantle EnvironmentDefaults


4) write tests for:
	- ModuleInitializerTest
	- after controller component is complete
		- validation
		- controller
	- model and path level authorization
		- path
			- collection where pairing happens (uses sut)
			- visit in our test and expect for good and bad
			- nested
			- tagging and untagging
		- see adapter\eloquent->registerObservers
		- test whether permissions affect when the model is fetched from a parent relationship
			- try both securing the one we call, and securing the relationship
	- contracts\config
		- auth, router, tss
	- middleware
		- adding and removing (tagPatterns, removeTag)
		- working with multiple
	- event layer
		- listeners implementing repo layer will be wrapped by RepositoryWrapper and receive all its benefits, without event layer having to do that manually
	- container
		decorator


	- connect AlertAdapter/Bugsnag in interface loader. a test trait/class for replacing and catching this?

	- find a way to decorate the model authorities

